# -*- coding: utf-8 -*-
"""Mnist_Dense.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WgDz4Y_VhJfo5CwJTe4EVCnnhym4QNa4

# <div align = center>MNIST: تصنيف الأرقام المكتوبة بخط اليد

<hr>

#1 - المكتبات (Librairies)
"""

import tensorflow as tf              # مكتبة التعلم الآلي والذكاء الاصطناعي
import numpy as np                   # مكتبة الرياضيات المتقدمة
import matplotlib.pyplot as plt      # مكتبة الرسوم البيانية
import random                        # لتوليد أرقام عشوائية
from keras.datasets import mnist     # Keras من المكتبة Mnist مجموعة البيانات    
from keras.models import Sequential  # نوع النموذج الذي سيتم استخدامه
from keras.layers.core import Dense, Activation # أنواع الطبقات التي سيتم استخدامها في نموذجنا
from keras.utils import np_utils     # تحويل المخرجات من [1،0،....،9] إلى مصفوفة ثنائية 
from keras.utils.vis_utils import plot_model    # رسم صورة للنموذج

"""# 2 - البيانات  (Data)

## 2.1 - تحميل البيانات
"""

(X_train, y_train), (X_test, y_test) = mnist.load_data()

print("X_train shape", X_train.shape)
print("y_train shape", y_train.shape)
print("X_test shape", X_test.shape)
print("y_test shape", y_test.shape)

"""## 2.2 - عرض البيانات"""

plt.rcParams['figure.figsize'] = (5,5) 

for i in range(9):
    plt.subplot(3,3,i+1)
    num = random.randint(0, len(X_train))
    plt.imshow(X_train[num], cmap='gray', interpolation='none')
    plt.title("Class {}".format(y_train[num]))
    
plt.tight_layout()

"""## 2.3 -  تغيير شكل المدخلات"""

X_train = X_train.reshape(60000, 784) 
X_test = X_test.reshape(10000, 784)

print("Training matrix shape", X_train.shape)
print("Testing matrix shape", X_test.shape)

"""## 2.4 -  تغيير شكل المخرجات"""

print("y_train[0] = ", y_train[0])

nb_classes = 10 

Y_train = np_utils.to_categorical(y_train, nb_classes)
Y_test = np_utils.to_categorical(y_test, nb_classes)

print("Y_train[0] = ", Y_train[0])

"""# 3- الشبكة العصبية

## 3.1 - النموذج
"""

model = Sequential([
  Dense(units=  128, activation='relu'   , name='Hidden_Layer_1',input_dim=784),
  Dense(units=  64 , activation='relu'   , name='Hidden_Layer_2'),  
  Dense(units=  10 , activation='softmax', name='Prediction')    

])

"""## 3.2 - ملخص النموذج """

print(model.summary())

"""## 3.3 - الرسم البياني للنموذج """

plot_model(model, to_file='Mnist_dense.png')

"""## 3.4 -  تركيب النموذج """

model.compile(
    loss="categorical_crossentropy",
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    metrics=["accuracy"],
)

"""## 3.5 - تدريب النموذج


"""

history = model.fit(X_train, Y_train,
                    epochs=7,
                    batch_size=100,
                    validation_split=0.3,
                    verbose=1)

"""## 3.6 -  التقييم

"""

loss, acc = model.evaluate(X_test, Y_test,verbose=1)

print("Accuracy = %0.2f" % (acc*100), "%")

"""# 4 - تحليل عملية التدريب

## 4.1 - الرسم البياني للدقة
"""

plt.figure(figsize=(16,6))
plt.plot(history.history['accuracy'], label='Accuracy (training data)')
plt.plot(history.history['val_accuracy'], label='Accuracy (validation data)')
plt.title('Accuracy')
plt.ylabel('Accuracy value')
plt.xlabel('No. epoch')
plt.legend(loc="lower right")
plt.show()

"""## 4.2 - الرسم البياني للخطأ"""

# Plot history: Loss
plt.figure(figsize=(16,8))
plt.plot(history.history['loss'], label='Loss (training data)')
plt.plot(history.history['val_loss'], label='Loss (validation data)')
plt.title('Loss')
plt.ylabel('Loss value')
plt.xlabel('No. epoch')
plt.legend(loc="upper right")
plt.show()