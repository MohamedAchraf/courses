# -*- coding: utf-8 -*-
"""Mnist_CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ACq5DErgY5lvvRQzo8v8TVRad11QTx8P

# <div align = center>MNIST: تصنيف الأرقام المكتوبة بخط اليد

<hr>

#1 - المكتبات (Librairies)
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

"""# 2 - البيانات  (Data)

## 2.1 - تحميل البيانات
"""

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

"""## 2.4 -  تغيير شكل المخرجات"""

y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test  = tf.keras.utils.to_categorical(y_test,  10)

"""# 3- الشبكة العصبية

## 3.1 - النموذج
"""

model = tf.keras.Sequential(
    [
      tf.keras.layers.Conv2D( 5, kernel_size=(3, 3), strides=1, padding='valid', activation="relu", name='Conv1_05_3x3' , input_shape=(28, 28, 1)),
      tf.keras.layers.Conv2D(20, kernel_size=(5, 5), strides=2, padding='valid', activation="relu", name='Conv2_20_5x5'),        
      tf.keras.layers.Conv2D(40, kernel_size=(5, 5), strides=1, padding='valid', activation="relu", name='Conv3_40_5x5'),
     
      tf.keras.layers.Flatten(),  
      
      tf.keras.layers.Dense(units=1960, activation='relu'   , name='Hidden_Layer_1'),
      tf.keras.layers.Dense(units= 128, activation='relu'   , name='Hidden_Layer_2'),    
      tf.keras.layers.Dense(units=  64, activation='relu'   , name='Hidden_Layer_3'),    
      tf.keras.layers.Dense(units=  10, activation='softmax', name='Prediction'),
    ]
)

print(model.summary())

"""## 3.2 - الرسم البياني للنموذج """

tf.keras.utils.plot_model(model, to_file='Mnist_CNN.png')

"""## 3.3 -  تركيب النموذج """

model.compile(
    loss="categorical_crossentropy",
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    metrics=["accuracy"],
)

"""## 3.4 - تدريب النموذج


"""

history = model.fit(x_train, y_train,
                    epochs=7,
                    batch_size=128,
                    validation_split=0.3,
                    verbose=1)

"""## 3.5 -  التقييم

"""

loss, acc = model.evaluate(x_test, y_test,verbose=1)

print("Accuracy = %0.2f" % (acc*100), "%")