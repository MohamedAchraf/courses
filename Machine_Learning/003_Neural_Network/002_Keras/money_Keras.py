# -*- coding: utf-8 -*-
"""money_TF2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xUEWSDs4ocmF8asZvmNVOKdbCNHC_kVf

# <div align = center>التّأكّد من سلامة الأوراق النّقديّة

<hr>

# 1. Import Librairies
"""

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score
from keras.utils.vis_utils import plot_model
from sklearn.model_selection import train_test_split
import pandas as pan
import matplotlib.pyplot as plt

"""# 2. Import Data"""

from google.colab import drive
drive.mount('/content/drive/')

data = pan.read_csv('/content/drive/My Drive/data/money.csv')

data.describe()

data.head()

#training data
X=data.loc[:, ['X1', 'X2', 'X3', 'X4']].values
Y=data.loc[:, ["Label1"]].values

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.35)

"""# 3. Build and Compile Model"""

model = Sequential([
  Dense(units=4 , activation='relu', name='Hidden_Layer_1',input_dim=4),
  Dense(units=1 , activation='sigmoid', name='prediction')
])

print(model.summary())

plot_model(model, to_file='money_shared_input_layer.png')

model.compile(loss='BinaryCrossentropy', optimizer='sgd', metrics='accuracy')

"""# 4. Fit, Predict and Evaluate"""

history = model.fit(X_train, Y_train, epochs=200, batch_size=100, verbose=0, validation_split=0.3)

Y_hat = model.predict(X_test)
Y_hat = [0 if val < 0.5 else 1 for val in Y_hat]

acc = accuracy_score(Y_test, Y_hat)
print("Accuracy = %0.2f" % (acc*100), "%")

# Plot history: Accuracy
plt.figure(figsize=(16,6))
plt.plot(history.history['accuracy'], label='Accuracy (training data)')
plt.plot(history.history['val_accuracy'], label='Accuracy (validation data)')
plt.title('Accuracy')
plt.ylabel('Accuracy value')
plt.xlabel('No. epoch')
plt.legend(loc="lower right")
plt.show()

# Plot history: Loss
plt.figure(figsize=(16,8))
plt.plot(history.history['loss'], label='Loss (training data)')
plt.plot(history.history['val_loss'], label='Loss (validation data)')
plt.title('Loss')
plt.ylabel('Loss value')
plt.xlabel('No. epoch')
plt.legend(loc="upper right")
plt.show()

"""# 5. Saving and Reloading"""

model.save('tfmodel_350')

del model

model = load_model('tfmodel_350')

Y_hat = model.predict(X_test)[17]
Y_hat[0]